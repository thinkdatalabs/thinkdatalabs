name: 🚀 Think Data Labs - GitHub Profile & Repository Metrics Update

on:
  schedule:
    - cron: '0 */6 * * *'    # Update every 6 hours for optimal performance
    - cron: '0 2 * * 1'      # Weekly comprehensive update on Mondays at 2 AM
  workflow_dispatch:         # Allow manual trigger
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'stats-only'
          - 'activity-only'
          - 'metrics-only'
          - 'repositories-only'
      force_rebuild:
        description: 'Force rebuild all badges and metrics'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
      - master
    paths:
      - 'README.md'
      - '.github/workflows/**'

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
  BLOG_FEED_URL: "https://blog.thinkdatalabs.com/feed.xml"
  COMPANY_NAME: "Think Data Labs"
  GITHUB_USERNAME: "thinkdatalabs"
  BOT_NAME: "think-data-labs-bot"
  BOT_EMAIL: "dev@thinkdatalabs.com"
  TIMEZONE: "Asia/Kolkata"

jobs:
  # Environment setup and validation
  setup-environment:
    runs-on: ubuntu-latest
    name: 🔧 Environment Setup & Validation
    outputs:
      should_update_stats: ${{ steps.scope.outputs.stats }}
      should_update_activity: ${{ steps.scope.outputs.activity }}
      should_update_metrics: ${{ steps.scope.outputs.metrics }}
      should_update_repositories: ${{ steps.scope.outputs.repositories }}
      timestamp: ${{ steps.time.outputs.timestamp }}
      date_formatted: ${{ steps.time.outputs.date_formatted }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Generate timestamps
        id: time
        run: |
          echo "timestamp=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          echo "date_formatted=$(date +'%B %d, %Y')" >> $GITHUB_OUTPUT

      - name: Determine update scope
        id: scope
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'full' }}"
          FORCE_REBUILD="${{ github.event.inputs.force_rebuild || 'false' }}"
          
          echo "🎯 Update Configuration:"
          echo "- Type: $UPDATE_TYPE"
          echo "- Force Rebuild: $FORCE_REBUILD"
          
          case $UPDATE_TYPE in
            "full")
              echo "stats=true" >> $GITHUB_OUTPUT
              echo "activity=true" >> $GITHUB_OUTPUT
              echo "metrics=true" >> $GITHUB_OUTPUT
              echo "repositories=true" >> $GITHUB_OUTPUT
              ;;
            "stats-only")
              echo "stats=true" >> $GITHUB_OUTPUT
              echo "activity=false" >> $GITHUB_OUTPUT
              echo "metrics=false" >> $GITHUB_OUTPUT
              echo "repositories=false" >> $GITHUB_OUTPUT
              ;;
            "activity-only")
              echo "stats=false" >> $GITHUB_OUTPUT
              echo "activity=true" >> $GITHUB_OUTPUT
              echo "metrics=false" >> $GITHUB_OUTPUT
              echo "repositories=false" >> $GITHUB_OUTPUT
              ;;
            "metrics-only")
              echo "stats=false" >> $GITHUB_OUTPUT
              echo "activity=false" >> $GITHUB_OUTPUT
              echo "metrics=true" >> $GITHUB_OUTPUT
              echo "repositories=false" >> $GITHUB_OUTPUT
              ;;
            "repositories-only")
              echo "stats=false" >> $GITHUB_OUTPUT
              echo "activity=false" >> $GITHUB_OUTPUT
              echo "metrics=false" >> $GITHUB_OUTPUT
              echo "repositories=true" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Validate environment and tokens
        run: |
          echo "🔍 Environment Validation:"
          
          if [ -z "${{ env.GITHUB_TOKEN }}" ]; then
            echo "❌ PERSONAL_ACCESS_TOKEN is not configured"
            exit 1
          fi
          echo "✅ GitHub Token: Configured"
          
          if [ -z "${{ env.WAKATIME_API_KEY }}" ]; then
            echo "⚠️ WAKATIME_API_KEY not configured (optional)"
          else
            echo "✅ WakaTime API Key: Configured"
          fi
          
          curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
               "https://api.github.com/user" > /dev/null
          
          if [ $? -eq 0 ]; then
            echo "✅ GitHub API Access: Verified"
          else
            echo "❌ GitHub API Access: Failed"
            exit 1
          fi
          
          echo "🎉 Environment validation completed successfully"

  # Update repository statistics and metadata
  update-repository-data:
    runs-on: ubuntu-latest
    name: 📊 Update Repository Statistics
    needs: setup-environment
    if: needs.setup-environment.outputs.should_update_repositories == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install required dependencies
        run: |
          npm install -g @octokit/rest chalk axios
          
      - name: Update repository statistics table
        run: |
          echo "📊 Updating Think Data Labs repository statistics..."
          
          cat > update_repositories.js << 'EOF'
          const { Octokit } = require('@octokit/rest');
          const fs = require('fs');
          const chalk = require('chalk');
          
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });
          
          async function updateRepositoryData() {
            try {
              console.log(chalk.blue('🔍 Fetching Think Data Labs repositories...'));
              
              const { data: repos } = await octokit.rest.repos.listForOrg({
                org: 'thinkdatalabs',
                type: 'public',
                sort: 'updated',
                per_page: 100
              });
              
              console.log(chalk.green(`📦 Found ${repos.length} repositories`));
              
              // Updated repository list from README.md
              const featuredRepositories = [
                // Python & Data Science
                'python-data-analytics',
                'ml-model-deployment',
                'python-api-services',
                'data-processing-pipelines',
                'python-algorithms',
                'scientific-computing',
                // Machine Learning & AI
                'ml-algorithms-library',
                'ai-model-training',
                'computer-vision-tools',
                'nlp-text-analysis',
                'deep-learning-frameworks',
                'reinforcement-learning',
                // Web Development
                'react-component-library',
                'nextjs-applications',
                'node-microservices',
                'typescript-utilities',
                'express-api-frameworks',
                'vue-applications',
                // Data Visualization
                'interactive-dashboards',
                'real-time-analytics',
                'chart-components',
                'data-export-tools',
                'd3-visualizations',
                'plotly-dashboards',
                // Cloud & Infrastructure
                'aws-deployment-tools',
                'docker-containers',
                'kubernetes-configs',
                'terraform-modules',
                'ci-cd-pipelines',
                'monitoring-solutions',
                // Mobile & Desktop Applications
                'react-native-apps',
                'electron-desktop-apps',
                'flutter-mobile-apps',
                'native-mobile-libs',
                'pwa-applications',
                'cross-platform-tools'
              ];
              
              let repositoryTableRows = '';
              let foundRepos = 0;
              
              for (const repoName of featuredRepositories) {
                const repo = repos.find(r => r.name === repoName);
                if (repo) {
                  foundRepos++;
                  const language = repo.language || 'Multiple';
                  const languageBadge = getLanguageBadge(language);
                  const status = repo.archived ? 'Archived' : 'Active';
                  const statusColor = status === 'Active' ? 'brightgreen' : 'red';
                  const statusBadge = `![${status}](https://img.shields.io/badge/Status-${status}-${statusColor})`;
                  
                  repositoryTableRows += `| ${repoName} | ${statusBadge} | ${languageBadge} | ![Stars](https://img.shields.io/github/stars/thinkdatalabs/${repoName}) | ![Forks](https://img.shields.io/github/forks/thinkdatalabs/${repoName}) | ![Issues](https://img.shields.io/github/issues/thinkdatalabs/${repoName}) | ![Last Commit](https://img.shields.io/github/last-commit/thinkdatalabs/${repoName}) |\n`;
                } else {
                  repositoryTableRows += `| ${repoName} | ![Planned](https://img.shields.io/badge/Status-Planned-yellow) | ![TBD](https://img.shields.io/badge/Language-TBD-lightgrey) | - | - | - | - |\n`;
                }
              }
              
              console.log(chalk.blue(`📋 Generated table for ${foundRepos} active repositories`));
              
              let readme = fs.readFileSync('README.md', 'utf8');
              
              const tableHeader = '| Repository | Status | Language | Stars | Forks | Issues | Last Commit |';
              const tableSeparator = '|------------|--------|----------|--------|-------|--------|-------------|';
              const fullTable = tableHeader + '\n' + tableSeparator + '\n' + repositoryTableRows;
              
              const tableRegex = /\| Repository \| Status \| Language[\s\S]*?(?=\n\n|\n---|\n##|\n###|$)/;
              if (tableRegex.test(readme)) {
                readme = readme.replace(tableRegex, fullTable);
                console.log(chalk.green('✅ Repository status table updated'));
              } else {
                console.log(chalk.yellow('⚠️ Repository table section not found'));
              }
              
              const metrics = calculateMetrics(repos);
              console.log(chalk.blue('📈 Repository Metrics:'));
              console.log(`   - Total Repositories: ${metrics.totalRepos}`);
              console.log(`   - Total Stars: ${metrics.totalStars}`);
              console.log(`   - Total Forks: ${metrics.totalForks}`);
              console.log(`   - Primary Languages: ${metrics.topLanguages.join(', ')}`);
              console.log(`   - Active Repositories: ${metrics.activeRepos}`);
              
              updateCompanyMetrics(readme, metrics);
              
              fs.writeFileSync('README.md', readme);
              console.log(chalk.green('🎉 Repository data updated successfully!'));
              
            } catch (error) {
              console.error(chalk.red('❌ Error updating repository data:'), error.message);
              process.exit(1);
            }
          }
          
          function getLanguageBadge(language) {
            const languageBadges = {
              'Python': '![Python](https://img.shields.io/badge/Python-3776AB?style=flat&logo=python&logoColor=white)',
              'JavaScript': '![JavaScript](https://img.shields.io/badge/JavaScript-F7DF1E?style=flat&logo=javascript&logoColor=black)',
              'TypeScript': '![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=flat&logo=typescript&logoColor=white)',
              'Java': '![Java](https://img.shields.io/badge/Java-ED8B00?style=flat&logo=java&logoColor=white)',
              'C++': '![C++](https://img.shields.io/badge/C++-00599C?style=flat&logo=c%2B%2B&logoColor=white)',
              'Go': '![Go](https://img.shields.io/badge/Go-00ADD8?style=flat&logo=go&logoColor=white)',
              'Rust': '![Rust](https://img.shields.io/badge/Rust-000000?style=flat&logo=rust&logoColor=white)',
              'React': '![React](https://img.shields.io/badge/React-20232A?style=flat&logo=react&logoColor=61DAFB)',
              'Next.js': '![Next.js](https://img.shields.io/badge/Next.js-000000?style=flat&logo=next.js&logoColor=white)',
              'Vue.js': '![Vue.js](https://img.shields.io/badge/Vue.js-35495E?style=flat&logo=vue.js&logoColor=4FC08D)',
              'Angular': '![Angular](https://img.shields.io/badge/Angular-DD0031?style=flat&logo=angular&logoColor=white)',
              'Svelte': '![Svelte](https://img.shields.io/badge/Svelte-4A4A55?style=flat&logo=svelte&logoColor=FF3E00)',
              'Multiple': '![Multiple](https://img.shields.io/badge/Multiple-Languages-rainbow?style=flat)'
            };
            
            return languageBadges[language] || `![${language}](https://img.shields.io/badge/${encodeURIComponent(language)}-gray?style=flat)`;
          }
          
          function calculateMetrics(repos) {
            const totalRepos = repos.length;
            const totalStars = repos.reduce((sum, repo) => sum + repo.stargazers_count, 0);
            const totalForks = repos.reduce((sum, repo) => sum + repo.forks_count, 0);
            const activeRepos = repos.filter(repo => !repo.archived).length;
            
            const languageCount = {};
            repos.forEach(repo => {
              if (repo.language) {
                languageCount[repo.language] = (languageCount[repo.language] || 0) + 1;
              }
            });
            
            const topLanguages = Object.entries(languageCount)
              .sort(([,a], [,b]) => b - a)
              .slice(0, 5)
              .map(([lang]) => lang);
            
            return {
              totalRepos,
              totalStars,
              totalForks,
              activeRepos,
              topLanguages
            };
          }
          
          function updateCompanyMetrics(readme, metrics) {
            console.log(chalk.blue('📊 Metrics calculated for company impact section'));
          }
          
          updateRepositoryData();
          EOF
          
          node update_repositories.js

      - name: Commit repository updates
        run: |
          git config --global user.name "${{ env.BOT_NAME }}"
          git config --global user.email "${{ env.BOT_EMAIL }}"
          
          if git diff --quiet; then
            echo "📝 No repository changes to commit"
          else
            git add README.md
            git commit -m "📊 Update repository statistics and metrics

            - Updated repository status table with new repositories
            - Refreshed project metadata
            - Synchronized badge information for all repositories
            
            🤖 Auto-generated by Think Data Labs Bot"
            echo "✅ Repository updates committed"
          fi

  # Update GitHub activity and recent contributions
  update-github-activity:
    runs-on: ubuntu-latest
    name: 🔄 Update GitHub Activity Feed
    needs: setup-environment
    if: needs.setup-environment.outputs.should_update_activity == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update recent GitHub activity
        uses: jamesgeorge007/github-activity-readme@master
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        with:
          COMMIT_MSG: '🔄 Update recent GitHub activity feed'
          MAX_LINES: 12
          COMMIT_NAME: ${{ env.BOT_NAME }}
          COMMIT_EMAIL: ${{ env.BOT_EMAIL }}

  # Update WakaTime development statistics
  update-development-stats:
    runs-on: ubuntu-latest
    name: ⏱️ Update Development Time Statistics
    needs: setup-environment
    if: needs.setup-environment.outputs.should_update_stats == 'true' && vars.WAKATIME_API_KEY != ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update WakaTime coding statistics
        uses: anmol098/waka-readme-stats@master
        with:
          WAKATIME_API_KEY: ${{ env.WAKATIME_API_KEY }}
          GH_TOKEN: ${{ env.GITHUB_TOKEN }}
          USERNAME: ${{ env.GITHUB_USERNAME }}
          SHOW_PROJECTS: "True"
          SHOW_PROFILE_VIEWS: "True"
          SHOW_COMMIT: "True"
          SHOW_DAYS_OF_WEEK: "True"
          SHOW_LANGUAGE: "True"
          SHOW_OS: "True"
          SHOW_TIMEZONE: "True"
          SHOW_UPDATED_DATE: "True"
          SHOW_TOTAL_CODE_TIME: "True"
          SHOW_EDITORS: "True"
          SHOW_SHORT_INFO: "True"
          SHOW_LOC_CHART: "False"
          SHOW_LINES_OF_CODE: "True"
          LOCALE: "en"
          COMMIT_MESSAGE: "⏱️ Updated weekly development time breakdown"
          COMMIT_BY_ME: "True"

  # Update blog posts and technical insights
  update-blog-content:
    runs-on: ubuntu-latest
    name: 📝 Update Blog Posts & Technical Insights
    needs: setup-environment
    if: needs.setup-environment.outputs.should_update_activity == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update latest blog posts and insights
        uses: gautamkrishnar/blog-post-workflow@master
        with:
          comment_tag_name: "BLOG-POST-LIST"
          feed_list: ${{ env.BLOG_FEED_URL }}
          max_post_count: 5
          template: "- 📰 **[$title]($url)** *(Published: $date)*"
          date_format: "mmmm dd, yyyy"  # Updated to match README format
          commit_message: "📝 Updated latest blog posts and technical insights"
          gh_token: ${{ env.GITHUB_TOKEN }}
          committer_username: ${{ env.BOT_NAME }}
          committer_email: ${{ env.BOT_EMAIL }}

  # Generate comprehensive GitHub metrics and visualizations
  generate-github-metrics:
    runs-on: ubuntu-latest
    name: 📈 Generate Comprehensive GitHub Metrics
    needs: setup-environment
    if: needs.setup-environment.outputs.should_update_metrics == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Generate GitHub metrics visualization
        uses: lowlighter/metrics@latest
        with:
          filename: github-metrics.svg
          token: ${{ env.GITHUB_TOKEN }}
          user: ${{ env.GITHUB_USERNAME }}
          template: classic
          base: header, activity, community, repositories, metadata
          config_timezone: ${{ env.TIMEZONE }}
          config_display: large
          config_output: auto
          
          plugin_activity: yes
          plugin_activity_limit: 20
          plugin_activity_days: 30
          plugin_activity_filter: all
          plugin_activity_visibility: all
          plugin_activity_timestamps: yes
          
          plugin_languages: yes
          plugin_languages_limit: 12
          plugin_languages_threshold: 1%
          plugin_languages_colors: github
          plugin_languages_sections: most-used
          plugin_languages_indepth: yes
          plugin_languages_analysis_timeout: 45
          plugin_languages_categories: markup, programming, data
          plugin_languages_recent_categories: markup, programming, data
          plugin_languages_recent_load: 500
          plugin_languages_recent_days: 30
          
          plugin_notable: yes
          plugin_notable_filter: stars:>5
          plugin_notable_repositories: yes
          plugin_notable_indepth: yes
          
          plugin_achievements: yes
          plugin_achievements_threshold: B
          plugin_achievements_secrets: yes
          plugin_achievements_display: compact
          plugin_achievements_limit: 20
          
          plugin_followup: yes
          plugin_followup_sections: repositories
          plugin_followup_indepth: yes
          
          plugin_code: yes
          plugin_code_lines: 20
          plugin_code_load: 800
          plugin_code_visibility: public
          plugin_code_skipped: thinkdatalabs/thinkdatalabs

      - name: Commit generated metrics
        run: |
          git config --global user.name "${{ env.BOT_NAME }}"
          git config --global user.email "${{ env.BOT_EMAIL }}"
          
          if [ -f "github-metrics.svg" ]; then
            git add github-metrics.svg
            git commit -m "📈 Update GitHub metrics visualization

            - Generated comprehensive metrics dashboard
            - Updated activity and contribution data
            - Refreshed language and project statistics
            
            🤖 Auto-generated by Think Data Labs Bot" || echo "No metrics changes to commit"
          fi

  # Security audit and quality assurance
  security-quality-audit:
    runs-on: ubuntu-latest
    name: 🛡️ Security & Quality Assurance
    needs: setup-environment
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Scan for exposed secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --fail

      - name: Validate README.md structure and content
        run: |
          echo "🔍 Validating Think Data Labs README.md structure..."
          
          REQUIRED_SECTIONS=(
            "About Us"
            "GitHub Activity"
            "Repository Structure"
            "Quick Start"
            "Our Core Services"
            "Featured Projects"
            "Company Impact"
            "Why Choose Think Data Labs"
            "Get In Touch"
            "Technologies We Master"
            "Open Source Contributions"
            "Success Stories"
            "Certifications & Partnerships"
          )
          
          MISSING_SECTIONS=()
          
          for section in "${REQUIRED_SECTIONS[@]}"; do
            if grep -q "## .*$section" README.md || grep -q "# .*$section" README.md; then
              echo "✅ Section found: $section"
            else
              echo "⚠️ Section missing or incorrectly formatted: $section"
              MISSING_SECTIONS+=("$section")
            fi
          done
          
          if [ ${#MISSING_SECTIONS[@]} -gt 0 ]; then
            echo ""
            echo "📋 Missing sections summary:"
            printf ' - %s\n' "${MISSING_SECTIONS[@]}"
            exit 1  # Fail the job if sections are missing
          else
            echo "🎉 All required sections are present!"
          fi

      - name: Validate badges and external links
        run: |
          echo "🏷️ Validating GitHub badges and external links..."
          
          BADBTGE_URLS=(
            "https://github-readme-stats.vercel.app/api?username=thinkdatalabs"
            "https://github-readme-streak-stats.herokuapp.com/?user=thinkdatalabs"
            "https://github-readme-stats.vercel.app/api/top-langs/?username=thinkdatalabs"
            "https://github-readme-activity-graph.vercel.app/graph?username=thinkdatalabs"
            "https://github-profile-trophy.vercel.app/?username=thinkdatalabs"
            "https://img.shields.io/github/stars/thinkdatalabs/python-data-analytics"
            "https://img.shields.io/github/forks/thinkdatalabs/react-component-library"
            "https://img.shields.io/github/stars/thinkdatalabs/ml-model-deployment"
            "https://img.shields.io/github/stars/thinkdatalabs/nextjs-applications"
          )
          
          for badge_url in "${BADGE_URLS[@]}"; do
            echo "Testing: $badge_url"
            if curl -s --head --max-time 10 "$badge_url" | head -n 1 | grep -q "200\|302"; then
              echo "✅ Badge accessible: $badge_url"
            else
              echo "⚠️ Badge may have issues: $badge_url"
            fi
          done
          
          if grep -q "dev@thinkdatalabs.com" README.md; then
            echo "✅ Contact email found"
          else
            echo "⚠️ Contact email missing"
          fi
          
          if grep -q "thinkdatalabs.com" README.md; then
            echo "✅ Company website referenced"
          else
            echo "⚠️ Company website reference missing"
          fi

  # Finalize all updates and create comprehensive commit
  finalize-profile-update:
    runs-on: ubuntu-latest
    name: 🚀 Finalize Profile Updates
    needs: [
      setup-environment,
      update-repository-data,
      update-github-activity,
      update-development-stats,
      update-blog-content,
      generate-github-metrics
    ]
    if: always() && !cancelled()
    
    steps:
      - name: Checkout repository with latest changes
        uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git for Think Data Labs Bot
        run: |
          git config --global user.name "${{ env.BOT_NAME }}"
          git config --global user.email "${{ env.BOT_EMAIL }}"

      - name: Pull and merge any remote changes
        run: |
          git pull origin main --rebase --autostash

      - name: Add profile update timestamp
        run: |
          echo "⏰ Adding Think Data Labs profile update timestamp..."
          
          TIMESTAMP="${{ needs.setup-environment.outputs.timestamp }}"
          DATE_FORMATTED="${{ needs.setup-environment.outputs.date_formatted }}"
          
          if grep -q "Last Updated:" README.md; then
            sed -i "s/Last Updated:.*/Last Updated: $DATE_FORMATTED/" README.md
            echo "✅ Updated existing timestamp"
          else
            echo -e "\n---\n\n> **🔄 Last Updated:** $DATE_FORMATTED | **🤖 Automated by:** Think Data Labs Bot" >> README.md
            echo "✅ Added new timestamp section"
          fi

      - name: Generate comprehensive update summary
        run: |
          echo "📊 Think Data Labs Profile Update Summary" > UPDATE_SUMMARY.md
          echo "============================================" >> UPDATE_SUMMARY.md
          echo "" >> UPDATE_SUMMARY.md
          echo "🕒 **Update Time:** ${{ needs.setup-environment.outputs.timestamp }}" >> UPDATE_SUMMARY.md
          echo "🏢 **Organization:** ${{ env.COMPANY_NAME }}" >> UPDATE_SUMMARY.md
          echo "" >> UPDATE_SUMMARY.md
          echo "### 📋 Component Update Status:" >> UPDATE_SUMMARY.md
          echo "- **Environment Setup:** ${{ needs.setup-environment.result }}" >> UPDATE_SUMMARY.md
          echo "- **Repository Data:** ${{ needs.update-repository-data.result }}" >> UPDATE_SUMMARY.md
          echo "- **GitHub Activity:** ${{ needs.update-github-activity.result }}" >> UPDATE_SUMMARY.md
          echo "- **Development Stats:** ${{ needs.update-development-stats.result }}" >> UPDATE_SUMMARY.md
          echo "- **Blog Content:** ${{ needs.update-blog-content.result }}" >> UPDATE_SUMMARY.md
          echo "- **GitHub Metrics:** ${{ needs.generate-github-metrics.result }}" >> UPDATE_SUMMARY.md
          echo "" >> UPDATE_SUMMARY.md
          
          if [[ "${{ needs.update-repository-data.result }}" == "success" ]] && \
             [[ "${{ needs.update-github-activity.result }}" == "success" ]]; then
            echo "🎉 **Overall Status:** SUCCESS" >> UPDATE_SUMMARY.md
            echo "✅ Think Data Labs GitHub profile successfully updated!" >> UPDATE_SUMMARY.md
          else
            echo "⚠️ **Overall Status:** PARTIAL SUCCESS" >> UPDATE_SUMMARY.md
            echo "Some components may require manual review." >> UPDATE_SUMMARY.md
          fi
          
          echo "" >> UPDATE_SUMMARY.md
          echo "🔗 **Profile URL:** https://github.com/thinkdatalabs" >> UPDATE_SUMMARY.md
          echo "📝 **Repository URL:** https://github.com/thinkdatalabs/thinkdatalabs" >> UPDATE_SUMMARY.md

      - name: Commit all finalized changes
        run: |
          git add -A
          
          if git diff --staged --quiet; then
            echo "📝 No changes detected for final commit"
          else
            echo "📝 Committing comprehensive profile updates..."
            
            COMMIT_MESSAGE="🚀 Think Data Labs: Comprehensive Profile Update (${{ needs.setup-environment.outputs.date_formatted }})

            📊 **Updated Components:**
            $([ "${{ needs.setup-environment.outputs.should_update_repositories }}" == "true" ] && echo "✅ Repository statistics for all projects")
            $([ "${{ needs.setup-environment.outputs.should_update_activity }}" == "true" ] && echo "✅ Recent GitHub activity and contributions")
            $([ "${{ needs.setup-environment.outputs.should_update_stats }}" == "true" ] && echo "✅ Development time tracking and coding stats")
            $([ "${{ needs.setup-environment.outputs.should_update_metrics }}" == "true" ] && echo "✅ Comprehensive GitHub metrics and visualizations")
            ✅ Blog posts and technical insights
            ✅ Profile badges and status indicators
            ✅ Company impact metrics and achievements
            
            🤖 Auto-generated by Think Data Labs Bot"
            
            git commit -m "$COMMIT_MESSAGE"
            git push
            echo "✅ Final changes pushed successfully"
          fi
